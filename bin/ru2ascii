#!/usr/bin/env lua
---------------------------------------------------------------------
--     This Lua5 script is Copyright (c) 2022, Peter J Billam      --
--                         pjb.com.au                              --
--  This script is free software; you can redistribute it and/or   --
--         modify it under the same terms as Lua5 itself.          --
---------------------------------------------------------------------
local Version = '1.1  for Lua5'
local VersionDate  = '24mar2022'
local Synopsis = [[
  ru2ascii    [filenames]  # cyrillic-to-ascii
  ru2ascii -r [filenames]  # Reverse, ie: ascii-to-cyrillic
  ru2ascii -d [filenames]  # reverse, and output PS format for DejaVu fonts
OR PERHAPS BETTER:
  ru2ascii -d [filenames]  # output PS format for DejaVu fonts
  ru2ascii                 # reads from standard input
]]
local function printf (...) io.stdout:write(string.format(...)) end

Reverse = false
DejaVu  = false
local iarg=1; while arg[iarg] ~= nil do
	if not string.find(arg[iarg], '^-[a-z]') then break end
	local first_letter = string.sub(arg[iarg],2,2)
	if first_letter == 'v' then
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate)
		os.exit(0)
	elseif first_letter == 'r' then
		Reverse = true
		if string.match(arg[iarg], '^-rd') then DejaVu  = true end
	elseif first_letter == 'd' then
		DejaVu  = true
		-- should -d set -r automatically ?
		-- Reverse = true
		-- HMM.. probably not; there is a need for utf8-to-dejavu translation
		-- if string.match(arg[iarg], '^-dr') then Reverse = true end
	else
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate.."\n\n"..Synopsis)
		os.exit(0)
	end
	iarg = iarg+1
end
if arg[iarg] then F = assert(io.open(arg[iarg], 'r')) else F = io.stdin end
local str    = F:read('a')
local utftab = {utf8.codepoint(str,1,-1)}

-- print('Reverse =', Reverse) ; print('DejaVu  =', DejaVu)

local codepoint2ascii = {
	[0x0410] = 'A',  [0x0411] = 'B',   [0x0412] = 'V',  [0x0413] = 'G',
	[0x0414] = 'D',  [0x0415] = 'Ye',  [0x0416] = 'Zh', [0x0417] = 'Z',
	[0x0418] = 'I',  [0x0419] = 'Y',   [0x041A] = 'K',  [0x041B] = 'L',
	[0x041C] = 'M',  [0x041D] = 'N',   [0x041E] = 'O',  [0x041F] = 'P',
	[0x0420] = 'R',  [0x0421] = 'S',   [0x0422] = 'T',  [0x0423] = 'U',
	[0x0424] = 'F',  [0x0425] = 'Kh',  [0x0426] = 'Ts', [0x0427] = 'Ch',
	[0x0428] = 'Sh', [0x0429] = 'Sch', [0x042A] = '"',  [0x042B] = 'Y',
	[0x042C] = "'",  [0x042D] = 'E',   [0x042E] = 'Yu', [0x042F] = 'Ya',
	[0x0430] = 'a',  [0x0431] = 'b',   [0x0432] = 'v',  [0x0433] = 'g',
	[0x0434] = 'd',  [0x0435] = 'ye',  [0x0436] = 'zh', [0x0437] = 'z',
	[0x0438] = 'i',  [0x0439] = 'y',   [0x043A] = 'k',  [0x043B] = 'l',
	[0x043C] = 'm',  [0x043D] = 'n',   [0x043E] = 'o',  [0x043F] = 'p',
	[0x0440] = 'r',  [0x0441] = 's',   [0x0442] = 't',  [0x0443] = 'u',
	[0x0444] = 'f',  [0x0445] = 'kh',  [0x0446] = 'ts', [0x0447] = 'ch',
	[0x0448] = 'sh', [0x0449] = 'sch', [0x044A] = '"',  [0x044B] = 'y',
	[0x044C] = "'",  [0x044D] = 'e',   [0x044E] = 'yu', [0x044F] = 'ya',
	[0x0401] = 'Io', [0x0451] = 'io',  [0x0407] = 'Yi', [0x0457] = 'yi',
	[0x0408] = 'Je', [0x0458] = 'je',  [0x0301] = '', 
}
-- 0x0301 means acute accent on the previous character.
-- could do 0x0430 0x0301 -> รก U+00E1 and 0x043E 0x0301 -> รณ U+00F3 ?
local ascii2codepoint = {}
for k,v in pairs(codepoint2ascii) do ascii2codepoint[v] = k end
local codepoint2dejavu = {
	[0x0410]='\\300', [0x0411]='\\301', [0x0412]='\\302', [0x0413]='\\303',
	[0x0414]='\\304', [0x0415]='\\305', [0x0416]='\\306', [0x0417]='\\307',
	[0x0418]='\\310', [0x0419]='\\311', [0x041A]='\\312', [0x041B]='\\313',
	[0x041C]='\\314', [0x041D]='\\315', [0x041E]='\\316', [0x041F]='\\317',
	[0x0420]='\\320', [0x0421]='\\321', [0x0422]='\\322', [0x0423]='\\323',
	[0x0424]='\\324', [0x0425]='\\325', [0x0426]='\\326', [0x0427]='\\327',
	[0x0428]='\\330', [0x0429]='\\331', [0x042A]='\\332', [0x042B]='\\303',
	[0x042C]='\\334', [0x042D]='\\335', [0x042E]='\\336', [0x042F]='\\307',
	[0x0430]='\\340', [0x0431]='\\341', [0x0432]='\\342', [0x0433]='\\343',
	[0x0434]='\\344', [0x0435]='\\345', [0x0436]='\\346', [0x0437]='\\347',
	[0x0438]='\\350', [0x0439]='\\351', [0x043A]='\\352', [0x043B]='\\353',
	[0x043C]='\\354', [0x043D]='\\355', [0x043E]='\\356', [0x043F]='\\357',
	[0x0440]='\\360', [0x0441]='\\361', [0x0442]='\\362', [0x0443]='\\363',
	[0x0444]='\\364', [0x0445]='\\365', [0x0446]='\\366', [0x0447]='\\367',
	[0x0448]='\\370', [0x0449]='\\371', [0x044A]='\\372', [0x044B]='\\373',
	[0x044C]='\\374', [0x044D]='\\375', [0x044E]='\\376', [0x044F]='\\377',
	[0x0401]='\\250', [0x0451]='\\270', [0x0407]='\\257', [0x0457]='\\277',
	[0x0408]='\\243', [0x0458]='\\274', [0x0301] = '', 
}
local ascii2dejavu = {}
for k,v in pairs(ascii2codepoint) do
	ascii2dejavu[k] = codepoint2dejavu[v]
end   -- print(ascii2dejavu['Yi'])

local char = string.char
local sub  = string.sub

if not Reverse then
	local function ru2str (v) return codepoint2ascii[v] or char(v) end
	local strtab = {}
	local insert = table.insert
	for i,v in ipairs(utftab) do insert(strtab, ru2str(v)) end
	io.write(table.concat(strtab, ''))
else
	local i = 1   -- index into the string str starts at 1 !!
	local n = string.len(str)   -- i is 1<=i<=n
	local cyrtab = {}
	while i <= n do
		local c = sub(str,i,i)
--io.stderr:write(string.format('i = %d, n = %d, c = %s\n',i,n,c))
		if i<(n-1) and (c=='S' or c=='s') and 
		  sub(str,i+1,i+1)== 'c' and sub(str,i+2,i+2) == 'h' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'ch']  -- sch
			i = i + 3
		elseif i<n and (c=='C' or c=='c') and sub(str,i+1,i+1)== 'h' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'h']   -- ch
			i = i + 2
		elseif i<n and (c=='I' or c=='i') and sub(str,i+1,i+1)== 'o' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'o']   -- ch
			i = i + 2
		elseif i<n and (c=='K' or c=='k') and sub(str,i+1,i+1)== 'h' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'h']   -- kh
			i = i + 2
		elseif i<n and (c=='S' or c=='s') and sub(str,i+1,i+1)== 'h' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'h']   -- sh
			i = i + 2
		elseif i<n and (c=='T' or c=='t') and sub(str,i+1,i+1)== 's' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'s']   -- ts
			i = i + 2
		elseif i<n and (c=='Y' or c=='y') and -- ya, ye or yu ?
		  string.find(sub(str,i+1,i+1), '[aeiu]') then
--io.stderr:write(string.format('  sub(str,i+1,i+1) = %s\n',sub(str,i+1,i+1)))
			cyrtab[#cyrtab+1] = ascii2codepoint[c..sub(str,i+1,i+1)]
			i = i + 2
		elseif i<n and (c=='Z' or c=='z') and sub(str,i+1,i+1)== 'h' then
			cyrtab[#cyrtab+1] = ascii2codepoint[c..'h']   -- zh
			i = i + 2
		else
			cyrtab[#cyrtab+1] = ascii2codepoint[c] or c
			i = i + 1
		end
	end
	if not DejaVu then
		for i,v in ipairs(cyrtab) do
			if type(v) == 'string' then io.write(v)
			else io.write(utf8.char(v)) -- convert codepoint to string char
			end
		end
	else
		for i,v in ipairs(cyrtab) do
			if type(v) == 'string' then io.write(v)
			else io.write(codepoint2dejavu[v])  -- codepoint to dejavu
			end
		end
	end
	
end

--[=[

=pod

=head1 NAME

ru2ascii - what it does

=head1 SYNOPSIS

 ru2ascii infile > outfile

=head1 DESCRIPTION

This script

d0 90  d0 91  d0 92  d0 93  d0 94  d0 95  d0 96  d0 97
d0 98  d0 99  d0 9a  d0 9b  d0 9c  d0 9d  d0 9e  d0 9f
d0 a0  d0 a1  d0 a2  d0 a3  d0 a4  d0 a5  d0 a6  d0 a7
d0 a8  d0 a9  d0 aa  d0 ab  d0 ac  d0 ad  d0 ae  d0 af

d0 b0  d0 b1  d0 b2  d0 b3  d0 b4  d0 b5  d0 b6  d0 b7
d0 b8  d0 b9  d0 ba  d0 bb  d0 bc  d0 bd  d0 be  d0 bf
d0 c0  d0 c1  d0 c2  d0 c3  d0 c4  d0 c5  d0 c6  d0 c7
d0 c8  d0 c9  d0 ca  d0 cb  d0 cc  d0 cd  d0 ce  d0 cf

=head1 ARGUMENTS

=over 3

=item I<-v>

Print the Version

=back

=head1 DOWNLOAD

This at is available at

=head1 CHANGES

 20220314 first working version
 20220324 -r ascii-to-cyrillic

=head1 AUTHOR

Peter J Billam, https://pjb.com.au/comp/contact.html

=head1 SEE ALSO

 https://pjb.com.au/

=cut

]=]
